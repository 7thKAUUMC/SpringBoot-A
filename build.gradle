plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'umc'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate.orm:hibernate-core:6.2.14.Final' // Hibernate 최신 버전
    runtimeOnly 'com.mysql:mysql-connector-j:8.0.33' // MySQL 드라이버 추가

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    // SpringDoc OpenAPI
    implementation 'org.springdoc:springdoc-openapi-ui:2.3.0' // 최신 버전 통일
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0' // 일관성 있는 버전 사용
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL 설정
def generated = 'src/main/generated'

querydsl {
    jpa = true
    querydslSourcesDir = generated
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/resources', generated]
        }
    }
}

// QueryDSL 관련 정리 작업
tasks.register('cleanGenerated') {
    doLast {
        delete fileTree(dir: generated, include: '**/*.java')
    }
}

tasks.named('compileQuerydsl') {
    options.annotationProcessorPath = configurations.querydsl
    doLast {
        // QueryDSL 생성 후, 발생한 클래스를 적절히 처리
        // (예: 리소스 파일들에 접근하여 자동으로 코드가 생성되도록 할 수 있음)
    }
}

clean {
    delete fileTree(dir: 'src/main/generated', include: '**/*.java')
}
